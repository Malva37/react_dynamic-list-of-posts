{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","utils/serverHelper.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postSelected","handleSelectPost","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","body","JSON","stringify","headers","fetch","response","json","client","getUsers","getPosts","userId","getComments","postId","deleteComment","commentId","addComment","comment","Loader","NewCommentForm","handleOnAdd","isLoadingNewComment","useState","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","setBody","isBodyError","setIsBodyError","handleReset","useEffect","onSubmit","e","event","preventDefault","isNameEmpty","length","isEmailEmpty","isBodyEmpty","handleAdd","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","comments","setComments","isVisibleLoader","setIsVisibleLoader","isVisibleComments","setIsVisibleComments","isVisibleNewForm","setIsVisibleNewForm","isVisibleWriteComment","setIsVisibleWriteComment","isVisibleCommentError","setIsVisibleCommentError","hasError","setHasError","isVisibleEmptyCommentMessage","setIsVisibleEmptyCommentMessage","setIsLoadingNewComment","loadComments","selectedPost","commentsFromServer","newComment","preparedComment","prev","href","preparedComments","filter","handleOnDelete","UserSelector","setUserSelectedId","userSelectedId","setPostSelected","setIsVisiblePostDetails","setIsVisibleSideBar","users","setUsers","isError","setIsError","showUsers","setShowUsers","wrapperRef","useRef","loadUsers","usersFromServer","document","addEventListener","current","contains","selectedUser","find","user","ref","role","newUserId","App","setPosts","isVisiblePosts","setIsVisiblePosts","isVisiblePostDetails","isVisibleSideBar","isVisiblePostError","setIsVisiblePostError","isVisibleEmptyPostMessage","setIsVisibleEmptyPostMessage","loadPosts","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.32befb40.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  postSelected: Post | null,\n  handleSelectPost: (post: Post) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postSelected,\n  handleSelectPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {postSelected?.id === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => {\n                      handleSelectPost(post);\n                    }}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => {\n                      handleSelectPost(post);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  await wait(300);\n  const response = await fetch(BASE_URL + url, options);\n\n  return response.json();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = async () => {\n  const response = await client.get<User[]>('/users');\n\n  return response;\n};\n\nexport const getPosts = async (userId: number) => {\n  const response = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n  return response;\n};\n\nexport const getComments = async (postId: number) => {\n  const response = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await client.delete(`/comments/${commentId}`);\n\n  return response;\n};\n\nexport const addComment = async (comment: CommentData) => {\n  const response = await client.post<Comment>('/comments', comment);\n\n  return response;\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { FormEvent, useEffect, useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  handleOnAdd: (newComment: CommentData) => void,\n  isLoadingNewComment: boolean,\n  postSelected: Post | null,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleOnAdd,\n  isLoadingNewComment,\n  postSelected,\n}) => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [body, setBody] = useState('');\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const handleReset = () => {\n    setIsBodyError(false);\n    setIsEmailError(false);\n    setIsNameError(false);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  useEffect(() => {\n    handleReset();\n  }, [postSelected]);\n\n  const handleAdd = (event: FormEvent) => {\n    event.preventDefault();\n\n    const isNameEmpty = name.length === 0;\n    const isEmailEmpty = email.length === 0;\n    const isBodyEmpty = body.length === 0;\n\n    setIsNameError(isNameEmpty);\n    setIsEmailError(isEmailEmpty);\n    setIsBodyError(isBodyEmpty);\n\n    if (isNameEmpty || isEmailEmpty || isBodyEmpty) {\n      return;\n    }\n\n    const newComment: CommentData = {\n      name,\n      email,\n      body,\n    };\n\n    handleOnAdd(newComment);\n    setBody('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(e) => handleAdd(e)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={({ target }) => {\n              setName(target.value);\n              setIsNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={({ target }) => {\n              setEmail(target.value);\n              setIsEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isBodyError,\n            })}\n            value={body}\n            onChange={({ target }) => {\n              setBody(target.value);\n              setIsBodyError(false);\n            }}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoadingNewComment,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { addComment, deleteComment, getComments } from '../utils/serverHelper';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post | null,\n  postSelected: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  postSelected,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVisibleLoader, setIsVisibleLoader] = useState(false);\n  const [isVisibleComments, setIsVisibleComments] = useState(false);\n  const [isVisibleNewForm, setIsVisibleNewForm] = useState(false);\n  const [isVisibleWriteComment, setIsVisibleWriteComment] = useState(false);\n  const [isVisibleCommentError, setIsVisibleCommentError] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isVisibleEmptyCommentMessage,\n    setIsVisibleEmptyCommentMessage] = useState(false);\n  const [isLoadingNewComment, setIsLoadingNewComment] = useState(false);\n\n  const loadComments = async (selectedPost: Post) => {\n    setIsVisibleLoader(true);\n    setIsVisibleEmptyCommentMessage(false);\n    setIsVisibleComments(false);\n\n    try {\n      const commentsFromServer = await getComments(selectedPost.id);\n\n      setComments(commentsFromServer);\n      setIsVisibleCommentError(false);\n      setIsVisibleWriteComment(true);\n      if (commentsFromServer.length === 0) {\n        setIsVisibleEmptyCommentMessage(true);\n      } else {\n        setIsVisibleComments(true);\n      }\n    } catch {\n      setIsVisibleCommentError(true);\n    } finally {\n      setIsVisibleLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post !== null) {\n      loadComments(post);\n      setIsVisibleNewForm(false);\n    }\n  }, [post]);\n\n  const handleOnDelete = (id: number) => {\n    if (post === null) {\n      return;\n    }\n\n    try {\n      deleteComment(id);\n      const preparedComments = comments.filter(comment => comment.id !== id);\n\n      if (preparedComments.length === 0) {\n        setIsVisibleEmptyCommentMessage(true);\n        setIsVisibleComments(false);\n      } else {\n        setIsVisibleComments(true);\n        setIsVisibleEmptyCommentMessage(false);\n      }\n\n      setComments(preparedComments);\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  const handleOnAdd = async (newComment: CommentData) => {\n    const preparedComment = { ...newComment, postId: post?.id };\n\n    setIsLoadingNewComment(true);\n\n    try {\n      const comment = await addComment(preparedComment);\n\n      setComments(prev => [...prev, comment]);\n      setIsVisibleEmptyCommentMessage(false);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoadingNewComment(false);\n    }\n  };\n\n  const handleShowNewForm = () => {\n    setIsVisibleNewForm(true);\n  };\n\n  if (hasError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"CommentsError\"\n      >\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isVisibleLoader && <Loader />}\n\n          {isVisibleCommentError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong!\n            </div>\n          )}\n\n          {isVisibleEmptyCommentMessage && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isVisibleComments && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        handleOnDelete(comment.id);\n                      }}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n\n                </article>\n              ))}\n\n            </>\n          )}\n\n          {isVisibleNewForm && (\n            <NewCommentForm\n              handleOnAdd={handleOnAdd}\n              isLoadingNewComment={isLoadingNewComment}\n              // skipAllErrors={skipAllErrors}\n              postSelected={postSelected}\n            />\n          )}\n\n          {(isVisibleWriteComment && !isVisibleNewForm) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleShowNewForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from '../utils/serverHelper';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setUserSelectedId: (id: number) => void,\n  userSelectedId: number,\n  setPostSelected: (value: Post | null) => void,\n  setIsVisiblePostDetails: (value: boolean) => void,\n  setIsVisibleSideBar: (value: boolean) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setUserSelectedId,\n  userSelectedId,\n  setPostSelected,\n  setIsVisiblePostDetails,\n  setIsVisibleSideBar,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [showUsers, setShowUsers] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const loadUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const handleLoadUsers = () => {\n    if (showUsers) {\n      setShowUsers(false);\n    } else {\n      setShowUsers(true);\n    }\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (wrapperRef.current\n          && !wrapperRef.current.contains(event.target as Node)) {\n        setShowUsers(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n  }, [wrapperRef]);\n\n  const handleSelectUser = (newUserId: number) => {\n    setShowUsers(false);\n    setUserSelectedId(newUserId);\n    setPostSelected(null);\n    setIsVisiblePostDetails(false);\n    setIsVisibleSideBar(false);\n  };\n\n  const selectedUser = users.find(user => user.id === userSelectedId)?.name;\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\">\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={wrapperRef}\n      className={classNames('dropdown', {\n        'is-active': showUsers,\n      })}\n    >\n\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleLoadUsers}\n        >\n          <span>\n            {\n              userSelectedId\n                ? selectedUser\n                : 'Choose a user'\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item',\n                { 'is-active': userSelectedId === user.id })}\n              key={user.id}\n              onClick={() => {\n                handleSelectUser(user.id);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './utils/serverHelper';\n\nexport const App: React.FC = () => {\n  const [userSelectedId, setUserSelectedId] = useState(0);\n  const [postSelected, setPostSelected] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isVisibleLoader, setIsVisibleLoader] = useState(false);\n  const [isVisiblePosts, setIsVisiblePosts] = useState(false);\n  const [isVisiblePostDetails, setIsVisiblePostDetails] = useState(false);\n  const [isVisibleSideBar, setIsVisibleSideBar] = useState(false);\n  const [isVisiblePostError, setIsVisiblePostError] = useState(false);\n  const [isVisibleEmptyPostMessage,\n    setIsVisibleEmptyPostMessage] = useState(false);\n  // let skipAllErrors = true;\n\n  const loadPosts = async () => {\n    setIsVisibleLoader(true);\n    setIsVisibleEmptyPostMessage(false);\n    setIsVisiblePosts(false);\n\n    try {\n      const postsFromServer = await getPosts(userSelectedId);\n\n      setPosts(postsFromServer);\n      setIsVisiblePostError(false);\n      if (postsFromServer.length === 0) {\n        setIsVisibleEmptyPostMessage(true);\n      } else {\n        setIsVisiblePosts(true);\n      }\n    } catch {\n      setIsVisiblePostError(true);\n    } finally {\n      setIsVisibleLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    if (userSelectedId) {\n      loadPosts();\n    }\n  }, [userSelectedId]);\n\n  const handleSelectPost = (post: Post) => {\n    if (postSelected?.id === post.id) {\n      setIsVisibleSideBar(false);\n      setIsVisiblePostDetails(false);\n      setPostSelected(null);\n    } else {\n      setPostSelected(post);\n      // skipAllErrors = true;\n      setIsVisibleSideBar(true);\n      setIsVisiblePostDetails(true);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setUserSelectedId={setUserSelectedId}\n                  userSelectedId={userSelectedId}\n                  setPostSelected={setPostSelected}\n                  setIsVisiblePostDetails={setIsVisiblePostDetails}\n                  setIsVisibleSideBar={setIsVisibleSideBar}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {userSelectedId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isVisiblePostError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isVisibleLoader && <Loader />}\n\n                {isVisibleEmptyPostMessage && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {isVisiblePosts && (\n                  <PostsList\n                    posts={posts}\n                    postSelected={postSelected}\n                    handleSelectPost={handleSelectPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isVisibleSideBar },\n            )}\n          >\n\n            {isVisiblePostDetails && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={postSelected}\n                  postSelected={postSelected}\n                />\n              </div>\n            )}\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}